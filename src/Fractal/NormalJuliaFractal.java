package Fractal;

import Utility.Complex;
import Utility.Fractal;
import java.awt.*;
import java.awt.image.BufferedImage;

/**
 * NormalJuliaFractal is a concrete implementation of the Fractal class for generating
 * a standard Julia set. It uses the escape-time algorithm to generate the fractal
 * image on a BufferedImage.
 * <p>
 * A Julia set is generated by iterating a function, $z = z^2 + c$, for each point in
 * the complex plane. The final color of a pixel depends on whether the point's
 * iteration sequence escapes to infinity or remains bounded.
 */
public class NormalJuliaFractal extends Fractal {

    /** The width of the image in pixels. */
    private final int width = 1920;

    /** The height of the image in pixels. */
    private final int height = 1080;

    /** The BufferedImage to draw the fractal on. */
    private BufferedImage image;

    /** A flag to track if the fractal has been generated. */
    private boolean fractalGenerated = false;

    /**
     * The constant complex number 'c' that defines the specific Julia set.
     * Changing this value changes the shape of the fractal.
     */
    private final Complex c = new Complex(-0.7, 0.27015);

    /**
     * Constructs a NormalJuliaFractal with a specified maximum number of iterations.
     *
     * @param numIter The maximum number of iterations for the escape-time algorithm.
     */
    public NormalJuliaFractal(int numIter) {
        super(numIter);
        // Initialize the BufferedImage with ARGB for transparency support
        image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
    }

    /**
     * Generates the Julia fractal by iterating through each pixel, mapping it to the
     * complex plane, and applying the Julia set formula.
     * <p>
     * The method calculates the escape time for each point and colors the corresponding
     * pixel based on that time. Points that do not escape within the maximum number
     * of iterations are colored black.
     */
    @Override
    public void generateFractal() {
        // Define the bounds of the complex plane to be rendered
        double xMin = -1.5;
        double xMax = 1.5;
        double yMin = -1.5;
        double yMax = 1.5;

        // Iterate through every pixel in the image
        for (int px = 0; px < width; px++) {
            for (int py = 0; py < height; py++) {
                // Translate the pixel coordinates to a point on the complex plane
                double zReal = xMin + (xMax - xMin) * px / (width - 1);
                double zImaginary = yMin + (yMax - yMin) * py / (height - 1);

                Complex z = new Complex(zReal, zImaginary);

                int iter = 0;

                // Perform the iteration loop for the Julia set equation: z = z^2 + c
                // The loop continues as long as the point remains bounded (magnitude < 2)
                // and the maximum number of iterations has not been reached.
                while (z.getMagnitudeSquared() < 4 && iter < getMaxIter()) {
                    z = z.square().add(c);
                    iter++;
                }

                // Determine the color of the pixel based on the number of iterations
                Color color;
                if (iter == getMaxIter()) {
                    // Points that do not escape are part of the Julia set, colored black
                    color = Color.BLACK;
                } else {
                    // Points that escape are colored based on their escape time,
                    // creating a smooth color gradient using the HSB color model.
                    float hue = (float) iter / getMaxIter();
                    color = Color.getHSBColor(hue, 1.0f, 1.0f);
                }
                image.setRGB(px, py, color.getRGB());
            }
        }
        fractalGenerated = true;
    }

    /**
     * Renders the pre-generated fractal image onto the provided Graphics2D object.
     * <p>
     * If the fractal has not yet been generated, this method first calls
     * {@link #generateFractal()} to create the image.
     *
     * @param g The Graphics2D context on which to draw the image.
     */
    @Override
    public void render(Graphics2D g) {
        if (!fractalGenerated) {
            generateFractal();
        }
        // Draw the stored BufferedImage onto the graphics context at position (0,0)
        g.drawImage(image, 0, 0, null);
    }
}